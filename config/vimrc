set nocompatible

" allow modified buffers to be hidden:
set hidden

" explicit about what <leader> is mapped to:
let mapleader = "\\"

" Include pathogen
call pathogen#infect()
call pathogen#helptags()


"" General
set directory^=$HOME/.vim/tmp//
set list " Show whitespace as a character
set listchars=eol:¬,tab:»\ ,trail:~,extends:>,precedes:<
set number  " Show line numbers
set cursorline  " highlight current line
set showmatch   " Highlight matching brace
set visualbell  " Use visual bell (no beeping)
set mouse=a " Enable mouse scrolling and other behaviors

set ruler   " Show row and column ruler information
" set showtabline=5   " Show tab bar

set foldmethod=indent " fold based on indent level
set foldlevel=10 " fold the 10th indent

" set autowriteall    " Auto-write all file changes

set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour


"" Tabstops

filetype indent on  " load filetype-specific indent files from places like `~/.vim/indent/python.vim`

set autoindent  " Auto-indent new lines
set shiftwidth=4    " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab    " Enable smart-tabs
set softtabstop=4   " Number of spaces per Tab
set tabstop=4       " number of visual spaces per TAB


"" Search

set hlsearch    " Highlight all search results
set ignorecase  " Always case-insensitive
set incsearch   " Searches for strings incrementally
set smartcase   " Enable smart-case search

let g:ackprg = 'ag --nogroup --nocolor --column' " Use ag instead of ack for more speed
map <Leader>a :Ack<Space>


"" Colors

syntax enable
colorscheme onedark
set background=dark


"" UI

set wildmenu " visual autocomplete for command menu


"" Airline
let g:airline#extensions#tabline#enabled = 1

"" Netrw
" Show the help banner
let g:netrw_banner = 1
" Long listing, with file size and timestamp
let g:netrw_liststyle = 1
autocmd FileType netrw set nolist

"" Stop using tabs:

" To open a new empty buffer
" This replaces :tabnew which I used to bind to this mapping
nmap <leader>T :enew<cr>

" Move to the next buffer
nmap <leader>l :bnext<CR>

" Move to the previous buffer
nmap <leader>h :bprevious<CR>

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <leader>bq :bp <BAR> bd #<CR>

" Show all open buffers and their status
nmap <leader>bl :ls<CR>


"" CtrlP

" Setup some default ignores
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.(git|hg|svn)|\_site)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg)$',
\}

" 'c' - the directory of the current file.
" 'r' - the nearest ancestor that contains one of these directories or files: .git .hg .svn .bzr _darcs
" 'a' - like c, but only if the current working directory outside of CtrlP is not a direct ancestor of the directory of the 
let g:ctrlp_working_path_mode = 'ra'

" Use a leader instead of the actual named binding
nmap <leader>p :CtrlP<cr>

" Easy bindings for its various modes
nmap <leader>bb :CtrlPBuffer<cr>
nmap <leader>bm :CtrlPMixed<cr>
nmap <leader>bs :CtrlPMRU<cr>

"" FZF
" set rtp+=/usr/local/opt/fzf
set rtp+=/Users/ryan/bin/homebrew/opt/fzf

let g:fzf_tags_command = 'ctags --extra=+f -R'
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nmap <Leader>t :Files<CR>
nmap <Leader>b :Buffers<CR>

" Let ack plugin use the_silver_searcher instead for fast text find
" let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ackprg = 'ag --vimgrep'
map <Leader>a :Ack<Space>
