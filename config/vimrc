set nocompatible

" Include pathogen
call pathogen#infect()
call pathogen#helptags()


"" General
set list " Show whitespace as a character
set listchars=eol:¬,tab:»\ ,trail:~,extends:>,precedes:<,space:·
set number  " Show line numbers
set cursorline  " highlight current line
set showmatch   " Highlight matching brace
set visualbell  " Use visual bell (no beeping)

set ruler   " Show row and column ruler information
" set showtabline=5   " Show tab bar

set foldmethod=indent " fold based on indent level
set foldlevel=10 " fold the 10th indent

" set autowriteall    " Auto-write all file changes

set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour


"" Tabstops

filetype indent on  " load filetype-specific indent files from places like `~/.vim/indent/python.vim`

set autoindent  " Auto-indent new lines
set shiftwidth=4    " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab    " Enable smart-tabs
set softtabstop=4   " Number of spaces per Tab
set tabstop=4       " number of visual spaces per TAB


"" Search

set hlsearch    " Highlight all search results
set ignorecase  " Always case-insensitive
set incsearch   " Searches for strings incrementally
set smartcase   " Enable smart-case search

let g:ackprg = 'ag --nogroup --nocolor --column' " Use ag instead of ack for more speed
map <Leader>a :Ack<Space>


"" Colors

syntax enable
colorscheme monokai
set background=dark


"" UI

set wildmenu " visual autocomplete for command menu


"" NERDTree
" Open NERDTree automatically when vim starts up on opening a directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


"" FZF
" set rtp+=/usr/local/opt/fzf
set rtp+=/Users/ryan/bin/homebrew/opt/fzf

let g:fzf_tags_command = 'ctags --extra=+f -R'
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

nmap <Leader>t :Files<CR>
nmap <Leader>b :Buffers<CR>

" Let ack plugin use the_silver_searcher instead for fast text find
" let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ackprg = 'ag --vimgrep'
map <Leader>a :Ack<Space>
