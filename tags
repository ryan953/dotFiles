!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/ryan/.dotFiles/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/6262ea62/
$NVIM_TUI_ENABLE_TRUE_COLOR	templates/.vimrc	/^    let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
--plugin-git	templates/.antigen.zsh	/^  --plugin-git () {$/;"	f
-antigen-bundle-install	templates/.antigen.zsh	/^-antigen-bundle-install () {$/;"	f
-antigen-bundle-rev	templates/.antigen.zsh	/^-antigen-bundle-rev () {$/;"	f
-antigen-bundle-short-name	templates/.antigen.zsh	/^-antigen-bundle-short-name () {$/;"	f
-antigen-cache-execute	templates/.antigen.zsh	/^-antigen-cache-execute () {$/;"	f
-antigen-cache-generate	templates/.antigen.zsh	/^-antigen-cache-generate () {$/;"	f
-antigen-cache-init	templates/.antigen.zsh	/^-antigen-cache-init () {$/;"	f
-antigen-defer-execute	templates/.antigen.zsh	/^-antigen-defer-execute () {$/;"	f
-antigen-defer-init	templates/.antigen.zsh	/^-antigen-defer-init () {$/;"	f
-antigen-echo-record	templates/.antigen.zsh	/^-antigen-echo-record () {$/;"	f
-antigen-ensure-repo	templates/.antigen.zsh	/^-antigen-ensure-repo () {$/;"	f
-antigen-env-setup	templates/.antigen.zsh	/^-antigen-env-setup () {$/;"	f
-antigen-find-bundle	templates/.antigen.zsh	/^-antigen-find-bundle () {$/;"	f
-antigen-find-record	templates/.antigen.zsh	/^-antigen-find-record () {$/;"	f
-antigen-get-bundles	templates/.antigen.zsh	/^-antigen-get-bundles () {$/;"	f
-antigen-get-clone-dir	templates/.antigen.zsh	/^-antigen-get-clone-dir () {$/;"	f
-antigen-get-cloned-bundles	templates/.antigen.zsh	/^-antigen-get-cloned-bundles() {$/;"	f
-antigen-get-themes	templates/.antigen.zsh	/^-antigen-get-themes () {$/;"	f
-antigen-hook-handler	templates/.antigen.zsh	/^-antigen-hook-handler () {$/;"	f
-antigen-interactive-mode	templates/.antigen.zsh	/^-antigen-interactive-mode () {$/;"	f
-antigen-load	templates/.antigen.zsh	/^-antigen-load () {$/;"	f
-antigen-load-env	templates/.antigen.zsh	/^-antigen-load-env () {$/;"	f
-antigen-load-env-cached	templates/.antigen.zsh	/^  -antigen-load-env-cached () {$/;"	f
-antigen-load-source	templates/.antigen.zsh	/^-antigen-load-source () {$/;"	f
-antigen-load-source-cached	templates/.antigen.zsh	/^  -antigen-load-source-cached () {$/;"	f
-antigen-lock-execute	templates/.antigen.zsh	/^-antigen-lock-execute () {$/;"	f
-antigen-lock-init	templates/.antigen.zsh	/^-antigen-lock-init () {$/;"	f
-antigen-parallel-execute	templates/.antigen.zsh	/^-antigen-parallel-execute() {$/;"	f
-antigen-parallel-init	templates/.antigen.zsh	/^-antigen-parallel-init () {$/;"	f
-antigen-parse-args	templates/.antigen.zsh	/^-antigen-parse-args () {$/;"	f
-antigen-parse-branch	templates/.antigen.zsh	/^-antigen-parse-branch () {$/;"	f
-antigen-purge-bundle	templates/.antigen.zsh	/^-antigen-purge-bundle () {$/;"	f
-antigen-reset-hooks	templates/.antigen.zsh	/^-antigen-reset-hooks () {$/;"	f
-antigen-revert-info	templates/.antigen.zsh	/^-antigen-revert-info() {$/;"	f
-antigen-set-default	templates/.antigen.zsh	/^-antigen-set-default () {$/;"	f
-antigen-theme-reset-hooks	templates/.antigen.zsh	/^-antigen-theme-reset-hooks () {$/;"	f
-antigen-update-bundle	templates/.antigen.zsh	/^-antigen-update-bundle () {$/;"	f
-antigen-update-repos	templates/.antigen.zsh	/^-antigen-update-repos () {$/;"	f
-antigen-use-oh-my-zsh	templates/.antigen.zsh	/^-antigen-use-oh-my-zsh () {$/;"	f
-antigen-use-prezto	templates/.antigen.zsh	/^-antigen-use-prezto () {$/;"	f
/	templates/.vimrc	/^nnoremap \/  :Ag<space>$/;"	m
<C-A><Down>	templates/.vimrc	/^nnoremap <C-A><Down>  :TmuxNavigateDown<cr>  " Move to split Down$/;"	m
<C-A><Left>	templates/.vimrc	/^nnoremap <C-A><Left>  :TmuxNavigateLeft<cr>  " Move to split Left$/;"	m
<C-A><Right>	templates/.vimrc	/^nnoremap <C-A><Right> :TmuxNavigateRight<cr> " Move to split Right$/;"	m
<C-A><S-Down>	templates/.vimrc	/^nnoremap <C-A><S-Down>  <C-w>5+ " Make split taller$/;"	m
<C-A><S-Left>	templates/.vimrc	/^nnoremap <C-A><S-Left>  <C-w>5< " Make split narrower$/;"	m
<C-A><S-Right>	templates/.vimrc	/^nnoremap <C-A><S-Right> <C-w>5> " Make split wider:$/;"	m
<C-A><S-Up>	templates/.vimrc	/^nnoremap <C-A><S-Up>    <C-w>5- " Make split shorter$/;"	m
<C-A><Up>	templates/.vimrc	/^nnoremap <C-A><Up>    :TmuxNavigateUp<cr>    " Move to split Up$/;"	m
<C-A>H	templates/.vimrc	/^nnoremap <C-A>H <C-w>5< " Make split narrower$/;"	m
<C-A>J	templates/.vimrc	/^nnoremap <C-A>J <C-w>5+ " Make split shorter$/;"	m
<C-A>K	templates/.vimrc	/^nnoremap <C-A>K <C-w>5- " Make split taller$/;"	m
<C-A>L	templates/.vimrc	/^nnoremap <C-A>L <C-w>5> " Make split wider:$/;"	m
<C-A>\\	templates/.vimrc	/^nnoremap <C-A>\\ :TmuxNavigatePrevious<cr> " Move to the previous split$/;"	m
<C-A>h	templates/.vimrc	/^nnoremap <C-A>h :TmuxNavigateLeft<cr>     " Move to split Left$/;"	m
<C-A>j	templates/.vimrc	/^nnoremap <C-A>j :TmuxNavigateDown<cr>     " Move to split Down$/;"	m
<C-A>k	templates/.vimrc	/^nnoremap <C-A>k :TmuxNavigateUp<cr>       " Move to split Up$/;"	m
<C-A>l	templates/.vimrc	/^nnoremap <C-A>l :TmuxNavigateRight<cr>    " Move to split Right$/;"	m
<C-z>	templates/.vimrc	/^nmap <C-z> <Plug>NERDCommenterToggle$/;"	m
<C-z>	templates/.vimrc	/^vmap <C-z> <Plug>NERDCommenterToggle$/;"	m
<Leader>]	templates/.vimrc	/^nnoremap <Leader>] <C-]>            " Jump to ctags tag definition.$/;"	m
<Leader>rr	templates/.vimrc	/^nnoremap <Leader>rr :redraw!<cr>     " Redraw screen to fix visual problems$/;"	m
<Leader>ve	templates/.vimrc	/^nnoremap <Leader>ve :e $MYVIMRC<cr>  " Edit .vimrc file$/;"	m
<Leader>vr	templates/.vimrc	/^nnoremap <Leader>vr :so $MYVIMRC<cr> " Reload .vimrc file$/;"	m
<Leader>w	templates/.vimrc	/^nnoremap <Leader>w :w<CR>            " Write a file.$/;"	m
<leader>T	templates/.vimrc	/^nnoremap <leader>T :enew<cr> " To open a new empty buffer$/;"	m
<leader>bq	templates/.vimrc	/^nnoremap <leader>bq :bp <BAR> bd #<CR> " Close buffer and move to previous$/;"	m
<leader>o	templates/.vimrc	/^nnoremap <leader>o :Lines<cr>$/;"	m
<leader>p	templates/.vimrc	/^nnoremap <leader>p :FZF<cr>$/;"	m
<leader>r	templates/.vimrc	/^nnoremap <leader>r :Buffers<cr>$/;"	m
<leader>t	templates/.vimrc	/^nnoremap <leader>t :Tags<cr>$/;"	m
CONFIG_FN	templates/bin/git-wtf	/^CONFIG_FN = ".git-wtfrc"$/;"	C
COPYRIGHT	templates/bin/git-wtf	/^COPYRIGHT = <<EOS$/;"	C
EOC	templates/.antigen.zsh	/^cat > $ANTIGEN_CACHE <<EOC$/;"	h
EOF	templates/.antigen.zsh	/^  cat <<EOF$/;"	h
ERR	templates/.antigen.zsh	/^ERR () {$/;"	f
HELP	templates/bin/git-wtf	/^HELP = <<EOS$/;"	C
Install	README.md	/^# Install$/;"	c
Install on OSX	README.md	/^# Install on OSX$/;"	c
KEY	templates/bin/git-wtf	/^KEY = <<EOS$/;"	C
LOG	templates/.antigen.zsh	/^LOG () {$/;"	f
More things to install	README.md	/^# More things to install$/;"	c
Numeric	templates/bin/git-wtf	/^class Numeric; def pluralize s; "#{to_s} #{s}" + (self != 1 ? "s" : "") end end$/;"	c
POWERLEVEL9K_DIR_CLASSES=	templates/.p10k.zsh	/^  typeset -g POWERLEVEL9K_DIR_CLASSES=()$/;"	f
StripTrailingWhitespaces	templates/.vimrc	/^function! <SID>StripTrailingWhitespaces()$/;"	f
TRACE	templates/.antigen.zsh	/^TRACE () {$/;"	f
Testing in Ubuntu	README.md	/^# Testing in Ubuntu$/;"	c
ToggleNumber	templates/.vimrc	/^function! ToggleNumber()$/;"	f
TrimWhitespace	templates/.vimrc	/^command TrimWhitespace %s\/\\s\\+$\/\/e$/;"	c
USAGE	templates/bin/git-wtf	/^USAGE = <<EOS$/;"	C
Update Antigen	README.md	/^# Update Antigen$/;"	c
WARN	templates/.antigen.zsh	/^WARN () {$/;"	f
_ANTIGEN_EXTENSIONS=	templates/.antigen.zsh	/^  _ANTIGEN_EXTENSIONS=()$/;"	f
_ANTIGEN_EXTENSIONS=	templates/.antigen.zsh	/^typeset -g _ANTIGEN_EXTENSIONS; _ANTIGEN_EXTENSIONS=()$/;"	f
_ANTIGEN_HOOKS=	templates/.antigen.zsh	/^  _ANTIGEN_HOOKS=()$/;"	f
_ANTIGEN_HOOKS=	templates/.antigen.zsh	/^typeset -Ag _ANTIGEN_HOOKS; _ANTIGEN_HOOKS=()$/;"	f
_ANTIGEN_HOOKS_META=	templates/.antigen.zsh	/^  _ANTIGEN_HOOKS_META=()$/;"	f
_ANTIGEN_HOOKS_META=	templates/.antigen.zsh	/^typeset -Ag _ANTIGEN_HOOKS_META; _ANTIGEN_HOOKS_META=()$/;"	f
_DEFERRED_BUNDLE=	templates/.antigen.zsh	/^  typeset -ga _DEFERRED_BUNDLE; _DEFERRED_BUNDLE=()$/;"	f
_PARALLEL_BUNDLE=	templates/.antigen.zsh	/^  typeset -ga _PARALLEL_BUNDLE; _PARALLEL_BUNDLE=()$/;"	f
_ZCACHE_BUNDLE_SOURCE=	templates/.antigen.zsh	/^  _ZCACHE_BUNDLE_SOURCE=(); _ZCACHE_CAPTURE_BUNDLE=()$/;"	f
_ZCACHE_CAPTURE_BUNDLE=	templates/.antigen.zsh	/^  _ZCACHE_BUNDLE_SOURCE=(); _ZCACHE_CAPTURE_BUNDLE=()$/;"	f
__bundle	templates/.antigen.zsh	/^  __bundle() {$/;"	f
__cleanup	templates/.antigen.zsh	/^  __cleanup() {$/;"	f
__list	templates/.antigen.zsh	/^  __list() {$/;"	f
_antigen	templates/.antigen.zsh	/^_antigen () {$/;"	f
ahead_behind_string	templates/bin/git-wtf	/^def ahead_behind_string ahead, behind$/;"	f
antigen	templates/.antigen.zsh	/^    antigen() {$/;"	f
antigen	templates/.antigen.zsh	/^antigen () {$/;"	f
antigen-add-hook	templates/.antigen.zsh	/^antigen-add-hook () {$/;"	f
antigen-apply	templates/.antigen.zsh	/^antigen-apply () {$/;"	f
antigen-apply-cached	templates/.antigen.zsh	/^  antigen-apply-cached () {$/;"	f
antigen-apply-defer	templates/.antigen.zsh	/^  antigen-apply-defer () {$/;"	f
antigen-apply-lock	templates/.antigen.zsh	/^  antigen-apply-lock () {$/;"	f
antigen-apply-parallel	templates/.antigen.zsh	/^  antigen-apply-parallel () {$/;"	f
antigen-apply-parallel-execute	templates/.antigen.zsh	/^  antigen-apply-parallel-execute () {$/;"	f
antigen-bundle	templates/.antigen.zsh	/^antigen-bundle () {$/;"	f
antigen-bundle-cached	templates/.antigen.zsh	/^  antigen-bundle-cached () {$/;"	f
antigen-bundle-defer	templates/.antigen.zsh	/^  antigen-bundle-defer () {$/;"	f
antigen-bundle-parallel	templates/.antigen.zsh	/^    antigen-bundle-parallel () {$/;"	f
antigen-bundle-parallel-execute	templates/.antigen.zsh	/^  antigen-bundle-parallel-execute () {$/;"	f
antigen-bundles	templates/.antigen.zsh	/^antigen-bundles () {$/;"	f
antigen-cache-gen	templates/.antigen.zsh	/^antigen-cache-gen () {$/;"	f
antigen-cleanup	templates/.antigen.zsh	/^antigen-cleanup () {$/;"	f
antigen-ext	templates/.antigen.zsh	/^antigen-ext () {$/;"	f
antigen-ext-init	templates/.antigen.zsh	/^antigen-ext-init () {$/;"	f
antigen-ext-list	templates/.antigen.zsh	/^antigen-ext-list () {$/;"	f
antigen-help	templates/.antigen.zsh	/^antigen-help () {$/;"	f
antigen-init	templates/.antigen.zsh	/^antigen-init () {$/;"	f
antigen-list	templates/.antigen.zsh	/^antigen-list () {$/;"	f
antigen-lock	templates/.antigen.zsh	/^  antigen-lock () {$/;"	f
antigen-purge	templates/.antigen.zsh	/^antigen-purge () {$/;"	f
antigen-remove-hook	templates/.antigen.zsh	/^antigen-remove-hook () {$/;"	f
antigen-reset	templates/.antigen.zsh	/^antigen-reset () {$/;"	f
antigen-restore	templates/.antigen.zsh	/^antigen-restore () {$/;"	f
antigen-revert	templates/.antigen.zsh	/^antigen-revert () {$/;"	f
antigen-selfupdate	templates/.antigen.zsh	/^antigen-selfupdate () {$/;"	f
antigen-snapshot	templates/.antigen.zsh	/^antigen-snapshot () {$/;"	f
antigen-theme	templates/.antigen.zsh	/^antigen-theme () {$/;"	f
antigen-update	templates/.antigen.zsh	/^antigen-update () {$/;"	f
antigen-use	templates/.antigen.zsh	/^antigen-use () {$/;"	f
antigen-version	templates/.antigen.zsh	/^antigen-version () {$/;"	f
backup_and_link	install-bash.sh	/^backup_and_link() {$/;"	f
backup_file	install-zsh.sh	/^backup_file () {$/;"	f
check_dist	bootstrap.sh	/^check_dist () {$/;"	f
check_if_file	install-bash.sh	/^check_if_file() {$/;"	f
check_version	bootstrap.sh	/^check_version () {$/;"	f
chksum	templates/.antigen.zsh	/^    chksum() { (md5sum; test $? = 127 && md5) 2>\/dev\/null | cut -d' ' -f1 }$/;"	f
colorset	templates/.vimrc	/^  augroup colorset$/;"	a
commits_between	templates/bin/git-wtf	/^def commits_between from, to$/;"	f
compdef	templates/.antigen.zsh	/^compdef () { __deferred_compdefs=($__deferred_compdefs "$*") }$/;"	f
copy_file	install-zsh.sh	/^copy_file () {$/;"	f
cyan	templates/bin/git-wtf	/^def cyan s; $color ? "\\033[36m#{s}\\033[0m" : s end$/;"	f
ensure_brew	install-zsh.sh	/^ensure_brew () {$/;"	f
ensure_font	install-zsh.sh	/^ensure_font () {$/;"	f
ensure_repo	install-zsh.sh	/^ensure_repo () {$/;"	f
file_exists_indicator	install-zsh.sh	/^file_exists_indicator () {$/;"	f
find_file	templates/bin/git-wtf	/^def find_file fn$/;"	f
g:NERDCreateDefaultMappings	templates/.vimrc	/^let g:NERDCreateDefaultMappings = 0$/;"	v
g:airline#extensions#tabline#enabled	templates/.vimrc	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline#extensions#tabline#formatter	templates/.vimrc	/^let g:airline#extensions#tabline#formatter = 'unique_tail_improved'$/;"	v
g:airline_powerline_fonts	templates/.vimrc	/^let g:airline_powerline_fonts = 0$/;"	v
g:airline_theme	templates/.vimrc	/^let g:airline_theme = 'onedark'$/;"	v
g:gitgutter_map_keys	templates/.vimrc	/^let g:gitgutter_map_keys = 0$/;"	v
g:netrw_altv	templates/.vimrc	/^let g:netrw_altv = 1$/;"	v
g:netrw_banner	templates/.vimrc	/^let g:netrw_banner = 0$/;"	v
g:netrw_browse_split	templates/.vimrc	/^let g:netrw_browse_split = 0$/;"	v
g:netrw_liststyle	templates/.vimrc	/^let g:netrw_liststyle = 3$/;"	v
g:netrw_winsize	templates/.vimrc	/^let g:netrw_winsize = 83$/;"	v
g:tmux_navigator_no_mappings	templates/.vimrc	/^let g:tmux_navigator_no_mappings = 1$/;"	v
g:webdevicons_enable_ctrlp	templates/.vimrc	/^let g:webdevicons_enable_ctrlp = 1$/;"	v
green	templates/bin/git-wtf	/^def green s; $color ? "\\033[32m#{s}\\033[0m" : s end$/;"	f
grey	templates/bin/git-wtf	/^def grey s; $color ? "\\033[1;30m#{s}\\033[0m" : s end$/;"	f
hook]]=	templates/.antigen.zsh	/^    hooks[$hooks[(I)$hook]]=()$/;"	f
iTerm colors:	README.md	/^# iTerm colors:$/;"	c
init	bootstrap.sh	/^init () {$/;"	f
init	install-zsh.sh	/^init () {$/;"	f
install_brew	install-bash.sh	/^	install_brew() {$/;"	f
install_cask	install-bash.sh	/^	install_cask() {$/;"	f
install_linux_dependencies	bootstrap.sh	/^install_linux_dependencies () {$/;"	f
install_osx_dependencies	bootstrap.sh	/^install_osx_dependencies () {$/;"	f
instant_prompt_example	templates/.p10k.zsh	/^  function instant_prompt_example() {$/;"	f
is_vim	templates/.tmux.conf	/^is_vim="ps -o state= -o comm= -t '#{pane_tty}' \\$/;"	k
j	templates/.vimrc	/^nnoremap j gj$/;"	m
k	templates/.vimrc	/^nnoremap k gk$/;"	m
link_file	install-zsh.sh	/^link_file () {$/;"	f
list=	templates/.antigen.zsh	/^  typeset -Ua list; list=()$/;"	f
main	templates/bin/git-smartlog	/^main() {$/;"	f
mapleader	templates/.vimrc	/^let mapleader = "\\\\"$/;"	v
my_git_formatter	templates/.p10k.zsh	/^  function my_git_formatter() {$/;"	f
pid]]=	templates/.antigen.zsh	/^          pids[$pids[(I)$pid]]=()$/;"	f
pids=	templates/.antigen.zsh	/^    typeset -a pids; pids=()$/;"	f
pr	templates/bin/git-smartlog	/^pr() {$/;"	f
prompt_dotfile_repo_state	templates/.p10k.overrides.zsh	/^  function prompt_dotfile_repo_state() {$/;"	f
prompt_example	templates/.p10k.zsh	/^  function prompt_example() {$/;"	f
purple	templates/bin/git-wtf	/^def purple s; $color ? "\\033[35m#{s}\\033[0m" : s end$/;"	f
record]]=	templates/.antigen.zsh	/^      _ANTIGEN_BUNDLE_RECORD[$_ANTIGEN_BUNDLE_RECORD[(I)$record]]=()$/;"	f
red	templates/bin/git-wtf	/^def red s; $color ? "\\033[31m#{s}\\033[0m" : s end$/;"	f
ryans_git_formatter	templates/.p10k.overrides.zsh	/^  function ryans_git_formatter() {$/;"	f
s:white	templates/.vimrc	/^    let s:white = { "gui": "#ABB2BF", "cterm": "145", "cterm16" : "7" }$/;"	v
show	templates/bin/git-wtf	/^def show b$/;"	f
show_commits	templates/bin/git-wtf	/^def show_commits commits, prefix="    "$/;"	f
show_relations	templates/bin/git-wtf	/^def show_relations b, all_branches$/;"	f
t	templates/.tmux.conf	/^bind -r C-Left select-window -t :-$/;"	k
t	templates/.tmux.conf	/^bind -r C-Right select-window -t :+$/;"	k
t	templates/.tmux.conf	/^bind -r C-h select-window -t :-$/;"	k
t	templates/.tmux.conf	/^bind -r C-l select-window -t :+$/;"	k
verify_tmux_version	templates/.tmux/versions.sh	/^verify_tmux_version () {$/;"	f
widget	templates/bin/git-wtf	/^def widget merged_in, remote_only=false, local_only=false, local_only_merge=false$/;"	f
yellow	templates/bin/git-wtf	/^def yellow s; $color ? "\\033[33m#{s}\\033[0m" : s end$/;"	f
